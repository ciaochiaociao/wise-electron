/* tslint:disable */
/* eslint-disable */
/**
 * Wise API
 * API for Wise Assistant Backend
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmotionRecord,
  PatchedEmotionRecord,
} from '../models/index';
import {
    EmotionRecordFromJSON,
    EmotionRecordToJSON,
    PatchedEmotionRecordFromJSON,
    PatchedEmotionRecordToJSON,
} from '../models/index';

export interface EmotionrecordsCreateRequest {
    emotionRecord: Omit<EmotionRecord, 'created_at'>;
}

export interface EmotionrecordsDestroyRequest {
    id: number;
}

export interface EmotionrecordsListRequest {
    createdAt?: Date;
    createdAtDateGt?: Date;
    createdAtDateRange?: Array<Date>;
    createdAtRange?: Array<Date>;
    createdAtTimeGt?: string;
    createdAtTimeRange?: Array<string>;
    createdAtYear?: number;
    emotion?: number;
}

export interface EmotionrecordsPartialUpdateRequest {
    id: number;
    patchedEmotionRecord?: Omit<PatchedEmotionRecord, 'created_at'>;
}

export interface EmotionrecordsRetrieveRequest {
    id: number;
}

export interface EmotionrecordsUpdateRequest {
    id: number;
    emotionRecord: Omit<EmotionRecord, 'created_at'>;
}

/**
 * 
 */
export class EmotionrecordsApi extends runtime.BaseAPI {

    /**
     */
    async emotionrecordsCreateRaw(requestParameters: EmotionrecordsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmotionRecord>> {
        if (requestParameters['emotionRecord'] == null) {
            throw new runtime.RequiredError(
                'emotionRecord',
                'Required parameter "emotionRecord" was null or undefined when calling emotionrecordsCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/emotionrecords/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmotionRecordToJSON(requestParameters['emotionRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmotionRecordFromJSON(jsonValue));
    }

    /**
     */
    async emotionrecordsCreate(requestParameters: EmotionrecordsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmotionRecord> {
        const response = await this.emotionrecordsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async emotionrecordsDestroyRaw(requestParameters: EmotionrecordsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emotionrecordsDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/emotionrecords/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async emotionrecordsDestroy(requestParameters: EmotionrecordsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.emotionrecordsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async emotionrecordsListRaw(requestParameters: EmotionrecordsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EmotionRecord>>> {
        const queryParameters: any = {};

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (requestParameters['createdAtDateGt'] != null) {
            queryParameters['created_at__date__gt'] = (requestParameters['createdAtDateGt'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['createdAtDateRange'] != null) {
            queryParameters['created_at__date__range'] = requestParameters['createdAtDateRange']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['createdAtRange'] != null) {
            queryParameters['created_at__range'] = requestParameters['createdAtRange']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['createdAtTimeGt'] != null) {
            queryParameters['created_at__time__gt'] = requestParameters['createdAtTimeGt'];
        }

        if (requestParameters['createdAtTimeRange'] != null) {
            queryParameters['created_at__time__range'] = requestParameters['createdAtTimeRange']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['createdAtYear'] != null) {
            queryParameters['created_at__year'] = requestParameters['createdAtYear'];
        }

        if (requestParameters['emotion'] != null) {
            queryParameters['emotion'] = requestParameters['emotion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/emotionrecords/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmotionRecordFromJSON));
    }

    /**
     */
    async emotionrecordsList(requestParameters: EmotionrecordsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EmotionRecord>> {
        const response = await this.emotionrecordsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async emotionrecordsPartialUpdateRaw(requestParameters: EmotionrecordsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmotionRecord>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emotionrecordsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/emotionrecords/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEmotionRecordToJSON(requestParameters['patchedEmotionRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmotionRecordFromJSON(jsonValue));
    }

    /**
     */
    async emotionrecordsPartialUpdate(requestParameters: EmotionrecordsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmotionRecord> {
        const response = await this.emotionrecordsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async emotionrecordsRetrieveRaw(requestParameters: EmotionrecordsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmotionRecord>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emotionrecordsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/emotionrecords/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmotionRecordFromJSON(jsonValue));
    }

    /**
     */
    async emotionrecordsRetrieve(requestParameters: EmotionrecordsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmotionRecord> {
        const response = await this.emotionrecordsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async emotionrecordsUpdateRaw(requestParameters: EmotionrecordsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmotionRecord>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling emotionrecordsUpdate().'
            );
        }

        if (requestParameters['emotionRecord'] == null) {
            throw new runtime.RequiredError(
                'emotionRecord',
                'Required parameter "emotionRecord" was null or undefined when calling emotionrecordsUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/emotionrecords/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmotionRecordToJSON(requestParameters['emotionRecord']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmotionRecordFromJSON(jsonValue));
    }

    /**
     */
    async emotionrecordsUpdate(requestParameters: EmotionrecordsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmotionRecord> {
        const response = await this.emotionrecordsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
